import repr
from input import get_input


''' Clause Systems:

Standard SL (SSL) (already implemented):
P -> I
I(s) /\ B /\ T(s,t) -> I(t)
I /\ ~B -> Q


Double Loop (DL):
P -> I1
I1(s) /\ B1(s) /\ T1(s,t) -> I2(t)
I2(s) /\ B2 /\ T2(s,t) -> I2(t)
I2(s) /\ ~B2(s) /\ T3(s,t) -> I1(t)
I1 /\ ~B1 -> Q

Triple Loop (TL):
P -> I1
I1(s) /\ B1(s) /\ T1(s,t) -> I2(t)
I2(s) /\ B2(s) /\ T2(s,t) -> I3(t)
I3(s) /\ B3(s) /\ T3(s,t) -> I3(t)
I3(s) /\ ~B3(s) /\ T4(s,t) -> I2(t)
I2(s) /\ ~B2(s) /\ T5(s,t) -> I1(t)
I1 /\ ~B1 -> Q

Four Loop (4L):
P -> I1
I1(s) /\ B1(s) /\ T1(s,t) -> I2(t)
I2(s) /\ B2(s) /\ T2(s,t) -> I3(t)
I3(s) /\ B3(s) /\ T3(s,t) -> I4(t)
I4(s) /\ B4(s) /\ T4(s,t) -> I4(t)
I4(s) /\ ~B4(s) /\ T5(s,t) -> I3(t)
I3(s) /\ ~B3(s) /\ T6(s,t) -> I2(t)
I2(s) /\ ~B2(s) /\ T7(s,t) -> I1(t)
I1 /\ ~B1 -> Q


Five Loop (5L):
P -> I1
I1(s) /\ B1(s) /\ T1(s,t) -> I2(t)
I2(s) /\ B2(s) /\ T2(s,t) -> I3(t)
I3(s) /\ B3(s) /\ T3(s,t) -> I4(t)
I4(s) /\ B4(s) /\ T4(s,t) -> I5(t)
I5(s) /\ B5(s) /\ T5(s,t) -> I5(t)
I5(s) /\ ~B5(s) /\ T6(s,t) -> I4(t)
I4(s) /\ ~B4(s) /\ T7(s,t) -> I3(t)
I3(s) /\ ~B3(s) /\ T8(s,t) -> I2(t)
I2(s) /\ ~B2(s) /\ T9(s,t) -> I1(t)
I1 /\ ~B1 -> Q

Six Loop (6L):
P -> I1
I1(s) /\ B1(s) /\ T1(s,t) -> I2(t)
I2(s) /\ B2(s) /\ T2(s,t) -> I3(t)
I3(s) /\ B3(s) /\ T3(s,t) -> I4(t)
I4(s) /\ B4(s) /\ T4(s,t) -> I5(t)
I5(s) /\ B5(s) /\ T5(s,t) -> I6(t)
I6(s) /\ B6(s) /\ T6(s,t) -> I6(t)
I6(s) /\ ~B6(s) /\ T7(s,t) -> I5(t)
I5(s) /\ ~B5(s) /\ T8(s,t) -> I4(t)
I4(s) /\ ~B4(s) /\ T9(s,t) -> I3(t)
I3(s) /\ ~B3(s) /\ T10(s,t) -> I2(t)
I2(s) /\ ~B2(s) /\ T11(s,t) -> I1(t)
I1 /\ ~B1 -> Q


Six Loop, variant 1, 1 parameter (6L-v1):
P -> I1
I1(s) /\ B1(s) /\ T1(s,t) -> I2(t)
I2(s) /\ B2(s) /\ T2(s,t) -> I3(t)
I3(s) /\ B3(s) /\ T3(s,t) -> I4(t)
I4(s) /\ B4(s) /\ T4(s,t) -> I5(t)
I5(s) /\ B5(s) /\ T5(s,t) -> I6(t)
I6 /\ B6 -> M
I6(s) /\ B6(s) /\ T6(s,t) -> I6(t)
I6(s) /\ ~B6(s) /\ T7(s,t) -> I5(t)
I5(s) /\ ~B5(s) /\ T8(s,t) -> I4(t)
I4(s) /\ ~B4(s) /\ T9(s,t) -> I3(t)
I3(s) /\ ~B3(s) /\ T10(s,t) -> I2(t)
I2(s) /\ ~B2(s) /\ T11(s,t) -> I1(t)
'''


class loop_simple: 
    #Standard SL
    nested_1 = get_input(P=np.array([[[1, 0, 0]]]),
                    B=np.array([[[1, -2, 6]]]),
                    Q=np.array([[[1, 0, 6]]]),
                    T=repr.SimpleTotalTransitionFunc(np.array([[1, 1], [0, 1]])))

    #Standard SL, but there is no invariant which satisfies this system!!!!!
    nested_1b = get_input(P=np.array([[[1, 0, 0]]]),
                    B=np.array([[[1, -2, 6]]]),
                    Q=np.array([ [[1, 2, 6]], [[1,-2,6]] ]),
                    T=repr.SimpleTotalTransitionFunc(np.array([[1, 1], [0, 1]])))

    #DL
    nested_2 = get_input(P=np.array([[[1, 0, 0, 0], [0,1,0,6] ]]),
                    B1=np.array([[[1, 0, -2, 6]]]),
                    B2=np.array([[[0, 1, -2, 6]]]),
                    Q=np.array([[[1, 0, 0, 6], [0, 1, 0, 6] ]]),
                    T1=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0], [0, 0, 0 ] , [0, 0, 1]])),
                    T2=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0], [0, 1, 1 ] , [0, 0, 1]])),
                    T3=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 1], [1, 0, 0 ] , [0, 0, 1]])))

    #TL
    nested_3 = get_input(P=np.array([[[1, 0, 0, 0, 0], [0,1,0, 0,6], [0,0,1,0,6] ]]),
                    B1=np.array([[[1, 0, 0, -2, 6]]]),
                    B2=np.array([[[0, 1, 0, -2, 6]]]),
                    B3=np.array([[[0, 0, 1, -2, 6]]]),
                    Q=np.array([[[1, 0, 0, 0, 6], [0, 1, 0, 0, 6], [0, 0, 1, 0, 6] ]]),
                    T1=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0], [0, 0, 0, 0 ] , [0, 0, 1, 0], [0, 0,0 , 1]])),
                    T2=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0], [0, 1, 0, 0 ] , [0, 0, 0, 0], [0, 0,0 , 1]])),
                    T3=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0], [0, 1, 0, 0 ] , [0, 0, 1, 1], [0, 0,0 , 1]])),
                    T4=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0], [0, 1, 0, 1 ] , [0, 0, 1, 0], [0, 0,0 , 1]])),
                    T5=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 1], [0, 1, 0, 0 ] , [0, 0, 1, 0], [0, 0,0 , 1]])) )

    #4-L
    nested_4 = get_input(P=np.array([[[1, 0, 0, 0, 0, 0], [0,1,0, 0, 0,6], [0,0,1,0, 0,6] , [0, 0, 0, 1, 0, 6] ]]),
                    B1=np.array([[[1, 0, 0, 0, -2, 6]]]),
                    B2=np.array([[[0, 1, 0, 0,  -2, 6]]]),
                    B3=np.array([[[0, 0, 1, 0,  -2, 6]]]),
                    B4=np.array([[[0, 0, 0, 1, -2, 6]]]),
                    Q=np.array([[[1, 0, 0, 0, 0, 6], [0, 1, 0, 0, 0, 6], [0, 0, 1, 0, 0, 6] , [0, 0, 0, 1, 0, 6] ]]),
                    T1=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0], [0, 0, 0, 0, 0 ] , [0, 0, 1, 0, 0], [0, 0,0 , 1, 0], [0, 0, 0, 0,1]])),
                    T2=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0 ] , [0, 0, 0, 0, 0], [0, 0,0 , 1, 0], [0, 0, 0, 0,1]])),
                    T3=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0 ] , [0, 0, 1, 0, 0], [0, 0,0 , 0, 0], [0, 0, 0, 0,1]])),
                    T4=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0 ] , [0, 0, 1, 0, 0], [0, 0,0 , 1, 1], [0, 0, 0, 0,1]])),
                    T5=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0 ] , [0, 0, 1, 0, 1], [0, 0,0 , 1, 0], [0, 0, 0, 0,1]])),
                    T6=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0], [0, 1, 0, 0, 1 ] , [0, 0, 1, 0, 0], [0, 0,0 , 1, 0], [0, 0, 0, 0,1]])),
                    T7=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 1], [0, 1, 0, 0, 0 ] , [0, 0, 1, 0, 0], [0, 0,0 , 1, 0], [0, 0, 0, 0,1]])) )
    
    #5-L
    nested_5 = get_input(P=np.array([[[1, 0, 0, 0, 0, 0, 0], [0,1,0, 0, 0, 0,6], [0,0,1,0, 0, 0,6] , [0, 0, 0, 1, 0, 0, 6] , [0, 0, 0, 0, 1, 0, 6] ]]),
                    B1=np.array([[[1, 0, 0, 0, 0, -2, 6]]]),
                    B2=np.array([[[0, 1, 0, 0, 0,  -2, 6]]]),
                    B3=np.array([[[0, 0, 1, 0, 0,  -2, 6]]]),
                    B4=np.array([[[0, 0, 0, 1, 0, -2, 6]]]),
                    B5=np.array([[[0, 0, 0, 0, 1, -2, 6]]]),
                    Q=np.array([[[1, 0, 0, 0, 0,0, 6], [0, 1, 0, 0, 0,0, 6], [0, 0, 1, 0, 0,0, 6] , [0, 0, 0, 1, 0,0, 6] , [0, 0, 0, 0, 1,0, 6] ]]), 
                    T1=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0 ] , [0, 0, 1, 0, 0, 0], [0, 0,0 , 1, 0, 0], 
                                                        [0, 0, 0, 0,1, 0], [0, 0, 0, 0, 0, 1]])),                    
                    T2=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0 ] , [0, 0, 0, 0, 0, 0], [0, 0,0 , 1, 0, 0], 
                                                        [0, 0, 0, 0,1, 0], [0, 0, 0, 0, 0, 1]])), 
                    T3=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0 ] , [0, 0, 1, 0, 0, 0], [0, 0,0 , 0, 0, 0], 
                                                        [0, 0, 0, 0,1, 0], [0, 0, 0, 0, 0, 1]])), 
                    T4=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0 ] , [0, 0, 1, 0, 0, 0], [0, 0,0 , 1, 0, 0], 
                                                        [0, 0, 0, 0,0, 0], [0, 0, 0, 0, 0, 1]])), 
                    T5=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0 ] , [0, 0, 1, 0, 0, 0], [0, 0,0 , 1, 0, 0], 
                                                        [0, 0, 0, 0,1, 1], [0, 0, 0, 0, 0, 1]])),
                    T6=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0 ] , [0, 0, 1, 0, 0, 0], [0, 0,0 , 1, 0, 1], 
                                                        [0, 0, 0, 0,1, 0], [0, 0, 0, 0, 0, 1]])),
                    T7=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0 ] , [0, 0, 1, 0, 0, 1], [0, 0,0 , 1, 0, 0], 
                                                        [0, 0, 0, 0,1, 0], [0, 0, 0, 0, 0, 1]])),
                    T8=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1 ] , [0, 0, 1, 0, 0, 0], [0, 0,0 , 1, 0, 0], 
                                                        [0, 0, 0, 0,1, 0], [0, 0, 0, 0, 0, 1]])),
                    T9=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0 ] , [0, 0, 1, 0, 0, 0], [0, 0,0 , 1, 0, 0], 
                                                        [0, 0, 0, 0,1, 0], [0, 0, 0, 0, 0, 1]]))  )    

   #6-L-v1, except there is no invariant which satisfies this!
    deep_nested = get_input(P=np.array([[[1, 0, 0, 0, 0, 0, 0, 0] ]]),
                B1=np.array([[[1, 0, 0, 0, 0, 0, -2, K1 - 1]]]),
                B2=np.array([[[0, 1, 0, 0, 0, 0,  -2, K1 - 1]]]),
                B3=np.array([[[0, 0, 1, 0, 0, 0,  -2, K1 - 1]]]),
                B4=np.array([[[0, 0, 0, 1, 0, 0, -2, K1 - 1]]]),
                B5=np.array([[[0, 0, 0, 0, 1, 0, -2, K1 - 1]]]),
                B6=np.array([[[0, 0, 0, 0, 0, 1, -2, K1 - 1]]]),
                
                #This part is still left!!
                M=np.array([[[1, 0, 0, 0, 0, 0, 0, 6], [0,1,0, 0, 0, 0, 0,6], [0,0,1,0, 0, 0, 0,6] , [0, 0, 0, 1, 0, 0, 0, 6] , 
                            [0, 0, 0, 0, 1, 0, 0, 6], [0, 0, 0, 0, 0, 1, 0, 6] ]]), 
                            
                T1=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])),                    
                T2=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 0, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])), 
                T3=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 0, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])), 
                T4=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,0, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])),
                T5=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 0,0], [0, 0, 0, 0, 0, 0,1] ])),
                T6=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,1], [0, 0, 0, 0, 0, 0,1] ])),
                T7=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,1], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])),
                T8=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,1], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])),
                T9=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,1], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])),
                T10=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,1 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])),    
                T11=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])) )


   #6-L
    nested_6 = get_input(P=np.array([[[1, 0, 0, 0, 0, 0, 0, 0], [0,1,0, 0, 0, 0, 0,6], [0,0,1,0, 0, 0, 0,6] , [0, 0, 0, 1, 0, 0, 0, 6] , 
                            [0, 0, 0, 0, 1, 0, 0, 6], [0, 0, 0, 0, 0, 1, 0, 6] ]]),
                B1=np.array([[[1, 0, 0, 0, 0, 0, -2, 6]]]),
                B2=np.array([[[0, 1, 0, 0, 0, 0,  -2, 6]]]),
                B3=np.array([[[0, 0, 1, 0, 0, 0,  -2, 6]]]),
                B4=np.array([[[0, 0, 0, 1, 0, 0, -2, 6]]]),
                B5=np.array([[[0, 0, 0, 0, 1, 0, -2, 6]]]),
                B6=np.array([[[0, 0, 0, 0, 0, 1, -2, 6]]]),
                Q=np.array([[[1, 0, 0, 0, 0, 0, 0, 6], [0,1,0, 0, 0, 0, 0,6], [0,0,1,0, 0, 0, 0,6] , [0, 0, 0, 1, 0, 0, 0, 6] , 
                            [0, 0, 0, 0, 1, 0, 0, 6], [0, 0, 0, 0, 0, 1, 0, 6] ]]), 
                            
                T1=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])),                    
                T2=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 0, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])), 
                T3=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 0, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])), 
                T4=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,0, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])),
                T5=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 0,0], [0, 0, 0, 0, 0, 0,1] ])),
                T6=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,1], [0, 0, 0, 0, 0, 0,1] ])),
                T7=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,1], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])),
                T8=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,1], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])),
                T9=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,1], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])),
                T10=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0,1 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])),    
                T11=repr.SimpleTotalTransitionFunc(np.array([[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0,0 ] , [0, 0, 1, 0, 0, 0,0], [0, 0,0 , 1, 0, 0,0], 
                                                    [0, 0, 0, 0,1, 0,0], [0, 0, 0, 0, 0, 1,0], [0, 0, 0, 0, 0, 0,1] ])) )  